Schema SQL

DROP TABLE IF EXISTS ProcurementData;

CREATE TABLE ProcurementData (
    TransactionID VARCHAR(10) PRIMARY KEY,
    OrderDate DATE,
    DeliveryDate DATE,
    SupplierName VARCHAR(255),
    SupplierCategory VARCHAR(100),
    Department VARCHAR(100),
    ItemDescription VARCHAR(255),
    Quantity INT,
    UnitPrice DECIMAL(18, 2),
    TotalPrice DECIMAL(18, 2),
    ContractReference VARCHAR(255),
    SavingsIdentified DECIMAL(18, 2),
    SavingsRealized DECIMAL(18, 2),
    PaymentTermsDays INT,
    Status VARCHAR(50) -- ADD THIS LINE
);

INSERT INTO ProcurementData (TransactionID, OrderDate, DeliveryDate, SupplierName, SupplierCategory, Department, ItemDescription, Quantity, UnitPrice, TotalPrice, ContractReference, SavingsIdentified, SavingsRealized, PaymentTermsDays) VALUES
('TRX00001', '2023-01-15', '2023-01-20', 'Tech Solutions Inc.', 'IT Services', 'IT', 'Software License Renewal', 1, 1500.00, 1500.00, 'CON1234', 0.00, 0.00, 30),
('TRX00002', '2023-02-01', '2023-02-10', 'MediSupply Co.', 'Medical Supplies', 'Patient Care', 'Bandages Order', 50, 5.50, 275.00, NULL, 20.00, 15.00, 60),
('TRX00003', '2023-03-05', '2023-03-08', 'Office Essentials Ltd.', 'Office Equipment', 'Operations', 'Printer Cartridges', 10, 35.00, 350.00, 'CON5678', 0.00, 0.00, 30),
('TRX00004', '2023-04-10', '2023-04-20', 'Tech Solutions Inc.', 'IT Services', 'IT', 'Server Maintenance', 1, 2000.00, 2000.00, 'CON1234', 100.00, 100.00, 30),
('TRX00005', '2023-05-20', '2023-06-01', 'Global Consulting', 'Consulting', 'Finance', 'Financial Audit Service', 1, 5000.00, 5000.00, NULL, 500.00, 450.00, 90);,


Query SQL

-- Query 1: Select all data, handling NULLs and calculating a basic savings rate.
SELECT
    TransactionID,
    OrderDate,
    DeliveryDate,
    SupplierName,
    SupplierCategory,
    Department,
    ItemDescription,
    Quantity,
    UnitPrice,
    TotalPrice,
    COALESCE(ContractReference, 'No Contract') AS ContractReferenceCleaned, -- Replaces NULLs with 'No Contract'
    SavingsIdentified,
    SavingsRealized,
    PaymentTermsDays,
    (SavingsRealized / NULLIF(SavingsIdentified, 0)) AS SavingsRealizationRatePerTransaction -- Avoids division by zero
FROM
    ProcurementData;

-- Query 2: Aggregate Total Spend and Savings by Supplier Category.
SELECT
    SupplierCategory,
    SUM(TotalPrice) AS TotalCategorySpend,
    SUM(SavingsIdentified) AS TotalCategorySavingsIdentified,
    SUM(SavingsRealized) AS TotalCategorySavingsRealized,
    (SUM(SavingsRealized) / NULLIF(SUM(SavingsIdentified), 0)) AS CategorySavingsRealizationRate
FROM
    ProcurementData
GROUP BY
    SupplierCategory
ORDER BY
    TotalCategorySpend DESC;

-- Query 3: Find transactions with high potential savings but low realization.
SELECT
    TransactionID,
    OrderDate,
    SupplierName,
    ItemDescription,
    TotalPrice,
    SavingsIdentified,
    SavingsRealized,
    (SavingsRealized / NULLIF(SavingsIdentified, 0)) AS SavingsRealizationPercentage
FROM
    ProcurementData
WHERE
    SavingsIdentified > 0 AND (SavingsRealized / NULLIF(SavingsIdentified, 0)) < 0.5 -- Less than 50% realized
ORDER BY
    SavingsIdentified DESC;

-- Query 4: Count transactions by status and month
SELECT
    DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth,
    Status,
    COUNT(TransactionID) AS NumberOfTransactions
FROM
    ProcurementData
GROUP BY
    OrderMonth, Status
ORDER BY
    OrderMonth, Status;

